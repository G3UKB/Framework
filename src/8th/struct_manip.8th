(* 
	struct_manip.8th
 
 Structure manipulation
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  This module provides a data driven way to get/set fields in any structure consisting
	of arbitrary nested arrays and maps. This prevents a stream of m:@, a:@, m:! etc with
	stack manipulations which gets very hard to follow. The alternative to this generic method
	is a set of words to get/set specific fields in specific structures.

	This is part of the framework in the namespace fr.*:.
	
	PUBLIC INTERFACE:
	
	Get the value of the element on the path given by a from the arbitrary structure *.
	val@	SED: * a -- *
	
	Get the value of the element on the path given by a at index given by a from the arbitrary structure *.
	idx_val@	SED: * a a -- *
	
	Set or Create the value given by the path a in the structure * with the value * at the index or key *.
	val!	SED: * a * * -- 
	
*)

\ ========================================
\ Testing only
true var, struct_manip_test

struct_manip_test @ #if
	\ Includes
	needs debug/sed
	true SED-CHECK
#then

\ ========================================
\ Set namespace
ns: fr.sm

\ ========================================

\ ===============================================================================
\ PRIVATE
\ Convention: private words start __
\ ===============================================================================

\ ========================================
\ Dereference the next level in the structure
: __level@	SED: * n * -- *
	\ in:		* - key or index to the next element 		
	\				n - index into path array
	\				* - arbitrary structure
	\ out:	* - arbitrary next element, scalar or structure
	\ Drop unwanted index
	nip
	\ Do we have an index or a key
	\ i.e are we looking in a dict or an array
	dup >kind ns:s n:= if	
		\ String, so a map key
		m:@	nip	
	else
		\ Number so an array index
		a:@	nip
	then ;

\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ ========================================
\ Getter words

\ Dereference the structure from a path descriptor, returning a field
: val@	SED: * a -- *
	\ in:		a - path to an element [s|n, s|n, s|n ...] 	
	\				* - arbitrary structure	
	\ out:	* - arbitrary element, scalar or structure
	' __level@ a:each
	drop 
;

\ ----------------------------------
\	1. Dereference the structure from path-2 to obtain an index value then
\ 2. Dereference the structure from path-1 to obtain an array
\ 3. Return the indexed element from the array
: idx_val@	SED: * a a -- *
	\ in:		a - path-2 to an element to yield an index or an index 	
	\				a - path-1 to an element [s|n, s|n, s|n ...] 
	\				* - arbitrary structure	
	\ out:	* - arbitrary element, scalar or structure
	\ Deref using path-2 (index) and stash result to r
	2 pick swap val@ >r
	\ Deref using path-1
	val@
	\ Now index the value list returned
	r> a:@
	\ Clean up
	nip 
;

\ ========================================
\ Setter words

\ Update a value in the given struct with value,ix at path descriptor
: val!	SED: * a * * -- 
	\ in:		* - value to put at index or key
	\				* - index or key to an element in the resulting structure 	
	\				a - path to an element [s|n, s|n, s|n ...] 
	\				* - arbitrary structure	
	\ out:	* - new structure
	\ Get target structure
	3 pick 3 pick val@
	\ Get idx or key
	2 pick dup >kind ns:s n:= if
		\ We have 'm key'
		2 pick m:!
	else
		\ We have 'a idx'
		2 pick a:!
	then
	\ Clean up
	2drop 2drop drop
;

\ ========================================
\ Reset namespace
ns: user

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================

struct_manip_test @ #if
	with: fr.sm
	4 json-pretty
	
	\ Test structures
	[
		["val-1", "val-2", "val-3"],
		["outer", ["val-1", "val-2", "val-3"]],
		["outer", "inner", ["val-1", "val-2", "val-3"]]
	] var, array-1
	
	{
		"struct-1" : {	
			"key-1" : 	["val-1", "val-2", "val-3"],
			"key-2" : 	["outer", ["val-1", "val-2", "val-3"]],
			"key-3" : 	["outer", "inner", ["val-1", "val-2", "val-3"]],
			"key-4" : 	{"inner-key" : ["val-1", "val-2", "val-3"]},
			"key-5" : 	{"inner-key" : {"inner-key-1" : ["val-1", "val-2", "val-3"]}}
		},
		"struct-2" : {	
				"key-1" : 	[0, ["val-1", "val-2", "val-3"]],
				"key-2" : 	[1, "inner", ["val-1", "val-2", "val-3"]],
				"key-3" : 	{"inner-key" : [1,["val-1", "val-2", "val-3"]]},
				"key-4" : 	[2, {"inner-key-1" : ["val-1", "val-2", "val-3"]}]
		}
	} var, map-1

	\ =========================================================================
	\ Getter examples
	: getter_examples
		"Array access" . cr
		array-1 @ [0,1] val@ . cr
		array-1 @ [1,1,1] val@ . cr
		array-1 @ [2,1] val@ . cr
		array-1 @ [2,2,2] val@ . cr
		
		"Map/Array access" . cr
		map-1 @ ["struct-1","key-1",2] val@ . cr
		map-1 @ ["struct-1","key-2",1,2] val@ . cr
		map-1 @ ["struct-1","key-3",1] val@ . cr
		map-1 @ ["struct-1","key-3",2,2] val@ . cr
		map-1 @ ["struct-1","key-4","inner-key"] val@ . cr
		map-1 @ ["struct-1","key-4","inner-key",1] val@ . cr
		map-1 @ ["struct-1","key-5","inner-key","inner-key-1"] val@ . cr
		map-1 @ ["struct-1","key-5","inner-key","inner-key-1",1] val@ . cr
		
		"Indexed Map/Array access" . cr
		map-1 @ ["struct-2","key-1",1] ["struct-2","key-1",0] idx_val@ . cr
		map-1 @ ["struct-2","key-2",2] ["struct-2","key-2",0] idx_val@ . cr
		map-1 @ ["struct-2","key-3","inner-key",1] ["struct-2","key-3","inner-key",0] idx_val@ . cr
		map-1 @ ["struct-2","key-4",1,"inner-key-1"] ["struct-2","key-4",0] idx_val@ . cr
	;

	\ =========================================================================
	\ Setter examples
	: setter_examples
		"Array setters" . cr
		array-1 @ [0] 0 "updated" val!
		array-1 @ [1,1] 1 "updated" val!
		array-1 @ . cr
		
		"Map/Array setters" . cr
		map-1 @ ["struct-1","key-1"] 0 "updated" val!
		map-1 @ ["struct-1","key-4"] "inner-key-1" [1,2,3,4] val!
		map-1 @ ["struct-1","key-4"] "inner-key" [5,6,7,8] val!
		map-1 @ . cr
	;

	: run_test
		"Run: " . . cr
		getter_examples
		setter_examples
		0.1 sleep
	;

	: run_tests
		' run_test 1 100 loop
	;
	
	run_tests
	
	"Test complete" log
	bye
#then