(* 
	struct_manip.8th
 
 Structure manipulation
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  This module provides a data driven way to get/set fields in any structure consisting
	of arbitrary nested arrays and maps. This prevents a stream of m:@, a:@, m:! etc with
	stack manipulations which gets very hard to follow.
	NOTE: If you only use this module to access arrays and structures then debugging invalid
	access will be a lot easier as parameter checks are performed.

	This is part of the framework in the namespace fr.*:.
	
	PUBLIC INTERFACE:
	
	Get the value of the element on the path given by a from the arbitrary structure *.
	val@	SED: * a -- *
	
	Get the value of the element on the path given by a at index given by a from the arbitrary structure *.
	idx_val@	SED: * a a -- *
	
	Set or Create the value given by the path a in the structure * with the value * at the index or key *.
	val!	SED: * a * * -- 
	
*)

\ ========================================
\ Set namespace
ns: fr.sm

\ ========================================

\ ===============================================================================
\ PRIVATE
\ Convention: private words start __
\ ===============================================================================

\ ========================================
\ Check for sensible stack for array and map access words.
\ Throw an exception if it looks wrong with all info we can obtain.
\ Not implemented at present.

: __a@	SED:  a n --  		
	\	in:		n - index
	\				a - target array
	\ out:	a - indexed item
	a:@
;

: __a!	SED:  a n * -- a 
	\ in:		* - item to store at index in array 		
	\				n - index
	\				a - target array
	\ out:	a - modified array
	a:!
;

: __m@	SED:  m s -- m *	
	\	in:		s - key
	\				m - target map
	\ out:	* - item from map
	\				m -	target map
	m:@
;

: __m!	SED:  m s * -- 
	\ in:		* - item to store at kay in map 		
	\				s - key
	\				m - target map
	\ out:	a - modified array
	m:!
;

\ ========================================
\ Dereference the next level in the structure
: __level@	SED: * n * -- *
	\ in:		* - key or index to the next element 		
	\				n - index into path array
	\				* - arbitrary structure
	\ out:	* - arbitrary next element, scalar or structure
	\ Drop unwanted index
	nip
	\ Do we have an index or a key
	\ i.e are we looking in a dict or an array
	dup >kind ns:s n:= if	
		\ String, so a map key
		__m@	nip	
	else
		\ Number so an array index
		__a@	nip
	then ;

\ ===============================================================================
\ PUBLIC
\ ===============================================================================

\ ========================================
\ Getter words

\ Dereference the structure from a path descriptor, returning a field
: val@	SED: * a -- *
	\ in:		a - path to an element [s|n, s|n, s|n ...] 	
	\				* - arbitrary structure	
	\ out:	* - arbitrary element, scalar or structure
	' __level@ a:each
	drop 
;

\ ----------------------------------
\	1. Dereference the structure from path-2 to obtain an index value then
\ 2. Dereference the structure from path-1 to obtain an array
\ 3. Return the indexed element from the array
: idx_val@	SED: * a a -- *
	\ in:		a - path-2 to an element to yield an index or an index 	
	\				a - path-1 to an element [s|n, s|n, s|n ...] 
	\				* - arbitrary structure	
	\ out:	* - arbitrary element, scalar or structure
	\ Deref using path-2 (index) and stash result to r
	2 pick swap val@ >r
	\ Deref using path-1
	val@
	\ Now index the value list returned
	r> __a@
	\ Clean up
	nip 
;

\ ========================================
\ Setter words

\ Update a value in the given struct with value,ix at path descriptor
: val!	SED: * a * * -- 
	\ in:		* - value to put at index or key
	\				* - index or key to an element in the resulting structure 	
	\				a - path to an element [s|n, s|n, s|n ...] 
	\				* - arbitrary structure	
	\ out:	* - new structure
	\ Get target structure
	3 pick 3 pick val@
	\ Get idx or key
	2 pick dup >kind ns:s n:= if
		\ We have 'm key'
		2 pick __m!
	else
		\ We have 'a idx'
		2 pick __a!
	then
	\ Clean up
	2drop 2drop drop
;

\ ========================================
\ Reset namespace
ns: user
