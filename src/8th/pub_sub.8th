(* 
	pub_sub.8th
 
  Publish/Subscribe system
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
     
  The public interface can be called from any task. 
*)

\ ========================================
\ Testing only
true var, pub_sub_test

\ ----------------------------------
pub_sub_test @ #if
	\ Includes
	"gen_server.8th" f:include
	\ needs debug/sed
	\ true SED-CHECK
#then
\ ========================================

\ Set namespace
ns: fr.ps
with: fr.gs

\ ===============================================================================
\ ===============================================================================
\ PRIVATE
\ Convention: private words start __
\ ===============================================================================

\ ========================================
\ Topic/Subscriber reference

\ Holder for subscriber references
\ Global var, requires lock semantics
{} var, __ps

\ ----------------------------------
\ Locked var
: __ps_lock@
	__ps lock @ ;

\ ----------------------------------
\ Unlocked var	
: __ps_unlock
	__ps unlock drop ;
	
\ ----------------------------------
\ Is locked	
: __ps_islocked
	__ps locked? nip ;

\ ========================================
\ Dispatcher
\ Dispatch to a subscriber
\ Note: pub/sub is a one way street, no responses allowed.
: __dispatcher	SED: * a --
	\ in:		a - [task-name, w] 	
	\				* - opaque data to send
	\ out:	none
	a:open	\ task-name w
	rot msg!
;
	
\ ===============================================================================
\ ===============================================================================
\ PUBLIC Call level Interface
\ ===============================================================================

\ ----------------------------------
\ Subscribe to a topic	
: subscribe	SED: s w s --
	\ in:		s - topic to subscribe to 	
	\				w - word to invoke in task
	\				s - task name to publish to
	\ out:	none
	__ps_lock@ 
	1 pick m:exists? not if	\ t-name word topic ps
		\ Topic does not exist so create
		a:new 4 pick a:push 3 pick a:push	\ t-name word topic ps [t-name, w]
		a:new swap a:push	\ t-name word topic ps [[t-name, w]]
		swap 2 pick rot m:!	\ t-name word topic ps
	else
		\ Topic exists
		1 pick m:@ \ t-name word topic ps [[t-name, w], ...]
		a:new 5 pick a:push 4 pick a:push \ t-name word topic ps [[t-name, w], ...] [t-name, w]
		a:push \ t-name word topic ps [[t-name, w], ... , [t-name, w]] 
	then
	__ps_unlock
	drop 2drop
;

\ ----------------------------------
\ Publish to a topic	
: publish	SED: * s --
	\ in:		s - topic to publish to 	
	\				* - opaque data to send
	\ out:	none	
	__ps_lock@ 
	1 pick m:exists? not if
		\ No such topic
		1 pick "Topic %s does not exist - ignoring" s:strfmt log 2drop
	else
		1 pick m:@ ' __dispatcher a:each!
	then
	__ps_unlock
	2 drop
;	
	
\ ========================================
\ Reset namespace
ns: user

\ ===============================================================================
\ ===============================================================================
\ Testing
\ ===============================================================================

pub_sub_test @ #if
	(*
		For a minimal tes:
		1. Create 2 gen-servers.
		2. have 2 words that receive published messages and print the data.
		4. Have two words that subscribe to a number of topics.
		5. Send a message via each gen-server to words in 4.
		6. Have 2 words that publish to the topics.
		7. Send a message via each gen-server to words in 6.
		8. The words in 2 should receive the messages.
	
	*)
	
	with: fr.gs
	with: fr.ps
	
	\ Create gen-servers
	
	\ Receivers
	: receiver1	SED: data
		"Called receiver1 with %s" s:strfmt log
	;
	
	: receiver2	SED: data
		"Called receiver2 with %s" s:strfmt log
	;
	
	\ Subscribers
	: subscriber1
		t:name@ ' receiver1 "Topic-1" subscribe
	;
	
	: subscriber2
			t:name@ ' receiver2 "Topic-2" subscribe
	;
	
	\ Publishers
	: publisher1
		"Data-1" "Topic-1" publish
	;
		
	: publisher2
		"Data-2" "Topic-2" publish
	;
	
	\ Create tasks
	"Task-1" gen_server_new
	"Task-2" gen_server_new
	\ Subscribe
	"Task-1" ' subscriber1 null msg!
	"Task-2" ' subscriber2 null msg!
	1 sleep
	\ Publish
	"Task-1" ' publisher1 null msg!
	"Task-2" ' publisher2 null msg!
	1 sleep

	bye
	
#then
	