(* 
	pub_sub.test.8th
 
  Test harness for pub_sub.8th
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
 *)
 
\ ========================================
\ Includes
"../gen_server.8th" f:include
"E:/Projects/SDRLibEConsole/trunk/src/8th/common/app_defs.8th" f:include
"../pub_sub.8th" f:include
"E:/Projects/SDRLibEConsole/trunk/src/8th/common/radio_defs.8th" f:include
"E:/Projects/SDRLibEConsole/trunk/src/8th/common/ps_events.8th" f:include
"E:/Projects/SDRLibEConsole/trunk/src/8th/connector/connector.8th" f:include
"E:/Projects/SDRLibEConsole/trunk/src/8th/harness/harness.8th" f:include

\ ========================================
\ Debug Settings
\ needs debug/sed
\ true SED-CHECK
\ needs debug/trace
\ dbg:line-info

\ ========================================
\ Test code
with: sdr
with: fr.gs
with: fr.ps
with: harness

4 json-pretty

(*
	This is a layer on top of gen-server and therefore has the same set of rules that
	apply to direct communication via gen-server and its associated words.

	We test this by creating the set of possible sources and sinks and then create a 
	matrix of one-way messages.

	We will nearly always be working with a GUI app so the tests assume this environment.

	1. Create a gen-server GS-1 and a user-task UT-1.
	2. Subscribe to TOPIC-1 from MAIN-TASK, GS-1 and UT-1.
	3. Subscribe to TOPIC-2 from from MAIN-TASK, GS-1 and UT-1.
	4. Subscribe to TOPIC-3 from from MAIN-TASK, GS-1 and UT-1.
	5. Publish TOPIC-2 from UT-1.
	6. Publish TOPIC-3 from GS-1. 
	7. From a GUI button click publish! TOPIC-1, 2 and 3.
	Note the button event is received back at the GUI using publish!
*)

\ ========================================
\ Gen-server subscription words
: gs1_task_subs_1
	t:name@ "TOPIC-1" "%s: %s received message: %s" s:strfmt log
;
: gs1_task_subs_2
	t:name@ "TOPIC-2" "%s: %s received message: %s" s:strfmt log
;
: gs1_task_subs_3
		t:name@ "TOPIC-3" "%s: %s received message: %s" s:strfmt log
;
: gs1_subscribe
	"GS-1" ' gs1_task_subs_1 "TOPIC-1" subscribe
	"GS-1" ' gs1_task_subs_2 "TOPIC-2" subscribe
	"GS-1" ' gs1_task_subs_3 "TOPIC-3" subscribe
;
: gs1_publish
	"GS-1 task data" "TOPIC-3" publish
;

\ ========================================
\ User task subscription words
: ut1_task_subs_1
	t:name@ "TOPIC-1" "%s: %s received message: %s" s:strfmt log
;
: ut1_task_subs_2
	t:name@ "TOPIC-2" "%s: %s received message: %s" s:strfmt log
;
: ut1_task_subs_3
	t:name@ "TOPIC-3" "%s: %s received message: %s" s:strfmt log
;
: ut1_term
	true "user-task" t:!
;

\ ========================================
\ Normal user task for communication
: user_task
	"UT-1" t:name!
	t:name@ "%s running" s:strfmt log
	\ Don't throw
	t:getq false q:throwing drop
	"UT-1" ' ut1_task_subs_1 "TOPIC-1" subscribe
	"UT-1" ' ut1_task_subs_2 "TOPIC-2" subscribe
	"UT-1" ' ut1_task_subs_3 "TOPIC-3" subscribe
	2 sleep
	"User task data" "TOPIC-2" publish
	"GS-1" ' gs1_publish null msg!
	false "user-task" t:!
	repeat
		"user-task" t:@ if break then
		msg@@
		0.1 sleep
	again
	"UT-1 exiting" log
;

\ ========================================
\ We have to create gen-servers in a task for a GUI app.
: startup_task
	"STARTUP" t:name!
	t:name@ "%s running" s:strfmt log
	\ Don't throw
	t:getq false q:throwing drop
	\ Init pubsub system
	pubsub_init
	\ Make a gen-server
	"GS-1" gen_server_new
	"GS-1" ' gs1_subscribe null msg!
	\ Make a normal user task
	' user_task t:task "UT-1" reg!
;

\ ========================================
\ GUI task events
: button_clicked
	 "Button-clicked data" "TOPIC-1" publish!
	 "Button-clicked data" "TOPIC-2" publish!
	 "Button-clicked data" "TOPIC-3" publish!
;

\ ========================================
\ GUI task subscriber words
: gui_subs_1
	t:name@ "TOPIC-1" "%s: %s received message: %s" s:strfmt log
;
: gui_subs_2
	t:name@ "TOPIC-2" "%s: %s received message: %s" s:strfmt log
;
: gui_subs_3
	t:name@ "TOPIC-3" "%s: %s received message: %s" s:strfmt log
;

\ ========================================
	\ Termination
: terminate
	false log-async
	"UT-1" ' ut1_term null msg!
	0.1 sleep
	pubsub_term
	0.1 sleep
	"GS-1" gen_server_term
	wait_all
	1 sleep
;

\ ========================================
\ Main script
: script
	"********* Pub/Sub matrix test *********" log
	\ Create user task and register it
	' startup_task t:task "STARTUP" reg!
	\ Register the main task so we can communicate
	t:curtask "MainTask" dup t:name! reg!
	\ Create a window with one button
	harness_button_window
	1 sleep
	\ Do GUI task subscriptions
	"MainTask" ' gui_subs_1 "TOPIC-1" subscribe
	"MainTask" ' gui_subs_2 "TOPIC-2" subscribe
	"MainTask" ' gui_subs_3 "TOPIC-3" subscribe
	\ Set closedown
	' terminate onexit
;

\ ========================================
true app:isgui !
: app:main
	script
	"app:main exiting" log
;